# Creating multi-stage build for production
FROM node:18-alpine as build
RUN apk update && apk add --no-cache build-base gcc autoconf automake zlib-dev libpng-dev vips-dev git > /dev/null 2>&1
ARG NODE_ENV=production
ENV NODE_ENV=${NODE_ENV}

WORKDIR /opt/
COPY package.json package-lock.json ./
RUN npm install -g node-gyp
RUN npm config set fetch-retry-maxtimeout 600000 -g && npm install --only=production
ENV PATH /opt/node_modules/.bin:$PATH
WORKDIR /opt/app
COPY . .
COPY .env .env
RUN npm run build

# Creating final production image
FROM node:18-alpine
RUN apk add --no-cache vips-dev
ARG NODE_ENV=production
ENV NODE_ENV=${NODE_ENV}
WORKDIR /opt/
COPY --from=build /opt/node_modules ./node_modules
WORKDIR /opt/app
COPY --from=build /opt/app ./
ENV PATH /opt/node_modules/.bin:$PATH

RUN chown -R node:node /opt/app
USER node
EXPOSE 1337
CMD ["npm", "run", "start"]

#FROM node:20.11.1-alpine AS builder
#WORKDIR '/app'
#COPY . .
#
#RUN npm install @angular/cli -g
#RUN npm install --force && \
#  npm run build
#
#FROM nginx:alpine
#COPY --from=builder /app/dist/* /usr/share/nginx/html/
#COPY nginx.conf /etc/nginx/conf.d/default.conf
#ENTRYPOINT [ "nginx", "-g", "daemon off;" ]

#FROM node:19.2.0-alpine AS builder
#WORKDIR '/app'
#COPY . .
#ARG config
#RUN npm install @angular/cli -g
#RUN npm install --force && \
#  npm run $config
#FROM nginx:alpine
#COPY --from=builder /app/dist/* /usr/share/nginx/html/
##COPY --from=builder /app/src/assets/ssl/* /etc/ssl/
#COPY nginx.conf /etc/nginx/conf.d/default.conf
#ENTRYPOINT [ "nginx", "-g", "daemon off;" ]

#FROM node:16.13.2-alpine
#WORKDIR '/app'
#COPY package.json .
#RUN npm install --legacy-peer-deps
#COPY . .
#EXPOSE 4200
#CMD ["npm", "start"]
